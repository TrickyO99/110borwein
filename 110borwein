#!/usr/bin/python3
# -*-coding:Utf-8 -*

import sys
import math
from signal import signal, SIGPIPE, SIG_DFL

signal(SIGPIPE,SIG_DFL)

def error_parsing() :
	print("USAGE : " + sys.argv[0] + " n")
	sys.exit(84)

if len(sys.argv) != 2 :
	error_parsing()

if sys.argv[1] == "-h" :
	print("USAGE\n\t\t", end="")
	print(sys.argv[0] + " n")
	print("\nDESCRIPTION\n\t\t", end="")
	print("n\tconstant defining the integral to be computed")
	sys.exit(0)

def print_pattern(n, result, diff) :
	print("I" + str(n) + " = ", end="")
	print('%.10f' %result)
	print("diff = ", end="")
	if abs(diff) < math.pow(10, -10) :
		diff = 0
	print('%.10f' %diff)

def rectangle_method(n, result, diff) :
	print("Rectangles:")
	print_pattern(n, result, diff)
	print("")

def trapezoidal_rule(n, result, diff) :
	print("Trapezoids:")
	print_pattern(n, result, diff)
	print("")

def Simpson_rule(n, result, diff) :
	print("Simpson:")
	print_pattern(n, result, diff)

def f(n, x) :
	if x == 0 :
		return 1
	k = 0
	F = 1
	while k <= n :
		F = F * (math.sin(x / (2 * k + 1)) / (x / (2 * k + 1)))
		k = k + 1
	return F

try :
	n = int(sys.argv[1])
except :
	error_parsing()

if n < 0 :

	sys.exit(84)

REC = 0.5
TRA = 0.25 * (1 + f(n, 5000))
SIM = 0.5 / 6 * (1 + f(n, 5000) + 4 * f(n, 0.25))

i = 1

while i <= 9999 :
	A = f(n, i / 2)
	B = f(n, i / 2 + 0.25)
	REC = REC + 0.5 * A
	TRA = TRA + 0.5 * A
	SIM = SIM + (2 * A + 4 * B) * 0.5 / 6
	i = i + 1

rectangle_method(n, REC, REC - (math.pi / 2))
trapezoidal_rule(n, TRA, TRA - (math.pi / 2))
Simpson_rule(n, SIM, SIM - (math.pi / 2))